// Generated by psc version 0.6.3
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var not = function (dict) {
        return dict.not;
    };
    var liftM1 = function (__dict_Monad_6) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_6)(f(_0));
                });
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var $greater$eq = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _354 = compare(__dict_Ord_14)(a1)(a2);
                if (_354 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_8) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
            };
        });
    };
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        not: not, 
        ">=": $greater$eq, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        pure: pure, 
        "$": $dollar, 
        "<<<": $less$less$less, 
        semigroupoidArr: semigroupoidArr, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqArray: eqArray, 
        ordNumber: ordNumber, 
        boolLikeBoolean: boolLikeBoolean
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Char = function (x) {
        return x;
    };
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_62) {
        return function (_63) {
            return _62 === _63;
        };
    });
    return {
        eqChar: eqChar
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    var elemIndex = function (__dict_Eq_80) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_80)(x));
        };
    };
    return {
        filter: filter, 
        elemIndex: elemIndex, 
        findIndex: findIndex, 
        length: length, 
        snoc: snoc
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    return {
        Tuple: Tuple
    };
})();
var PS = PS || {};
PS.Control_Monad_State_Trans = (function () {
    "use strict";
    var Data_Tuple = PS.Data_Tuple;
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Lazy = PS.Control_Lazy;
    var StateT = function (x) {
        return x;
    };
    var runStateT = function (_245) {
        return _245;
    };
    var monadStateT = function (__dict_Monad_184) {
        return new Prelude.Monad(function () {
            return applicativeStateT(__dict_Monad_184);
        }, function () {
            return bindStateT(__dict_Monad_184);
        });
    };
    var functorStateT = function (__dict_Monad_188) {
        return new Prelude.Functor(Prelude.liftM1(monadStateT(__dict_Monad_188)));
    };
    var bindStateT = function (__dict_Monad_191) {
        return new Prelude.Bind(function (_246) {
            return function (_247) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_191["__superclass_Prelude.Bind_1"]())(_246(s))(function (_13) {
                        return runStateT(_247(_13.value0))(_13.value1);
                    });
                };
            };
        }, function () {
            return applyStateT(__dict_Monad_191);
        });
    };
    var applyStateT = function (__dict_Monad_192) {
        return new Prelude.Apply(Prelude.ap(monadStateT(__dict_Monad_192)), function () {
            return functorStateT(__dict_Monad_192);
        });
    };
    var applicativeStateT = function (__dict_Monad_193) {
        return new Prelude.Applicative(function () {
            return applyStateT(__dict_Monad_193);
        }, function (a) {
            return StateT(function (s) {
                return Prelude["return"](__dict_Monad_193)(new Data_Tuple.Tuple(a, s));
            });
        });
    };
    return {
        StateT: StateT, 
        runStateT: runStateT, 
        functorStateT: functorStateT, 
        applyStateT: applyStateT, 
        applicativeStateT: applicativeStateT, 
        bindStateT: bindStateT, 
        monadStateT: monadStateT
    };
})();
var PS = PS || {};
PS.Data_Identity = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Traversable = PS.Data_Traversable;
    var Identity = function (x) {
        return x;
    };
    var runIdentity = function (_325) {
        return _325;
    };
    var functorIdentity = new Prelude.Functor(function (_331) {
        return function (_332) {
            return _331(_332);
        };
    });
    var applyIdentity = new Prelude.Apply(function (_333) {
        return function (_334) {
            return _333(_334);
        };
    }, function () {
        return functorIdentity;
    });
    var bindIdentity = new Prelude.Bind(function (m) {
        return function (f) {
            return f(runIdentity(m));
        };
    }, function () {
        return applyIdentity;
    });
    var applicativeIdentity = new Prelude.Applicative(function () {
        return applyIdentity;
    }, Identity);
    var monadIdentity = new Prelude.Monad(function () {
        return applicativeIdentity;
    }, function () {
        return bindIdentity;
    });
    return {
        Identity: Identity, 
        runIdentity: runIdentity, 
        functorIdentity: functorIdentity, 
        applyIdentity: applyIdentity, 
        applicativeIdentity: applicativeIdentity, 
        bindIdentity: bindIdentity, 
        monadIdentity: monadIdentity
    };
})();
var PS = PS || {};
PS.Control_Monad_State_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_RWS = PS.Control_Monad_RWS;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_RWS_Trans = PS.Control_Monad_RWS_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    var MonadState = function (state) {
        this.state = state;
    };
    var state = function (dict) {
        return dict.state;
    };
    var put = function (__dict_Monad_332) {
        return function (__dict_MonadState_333) {
            return function (s) {
                return state(__dict_MonadState_333)(function (_) {
                    return new Data_Tuple.Tuple(Prelude.unit, s);
                });
            };
        };
    };
    var monadStateStateT = function (__dict_Monad_339) {
        return new MonadState(function (f) {
            return Control_Monad_State_Trans.StateT(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](__dict_Monad_339))(f));
        });
    };
    var get = function (__dict_Monad_353) {
        return function (__dict_MonadState_354) {
            return state(__dict_MonadState_354)(function (s) {
                return new Data_Tuple.Tuple(s, s);
            });
        };
    };
    return {
        MonadState: MonadState, 
        put: put, 
        get: get, 
        state: state, 
        monadStateStateT: monadStateStateT
    };
})();
var PS = PS || {};
PS.HangmanM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var Data_Array = PS.Data_Array;
    var Control_Monad_State = PS.Control_Monad_State;
    var Data_Char = PS.Data_Char;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Data_Identity = PS.Data_Identity;
    var AlreadyGuessed = (function () {
        function AlreadyGuessed() {

        };
        AlreadyGuessed.value = new AlreadyGuessed();
        return AlreadyGuessed;
    })();
    var Hit = (function () {
        function Hit() {

        };
        Hit.value = new Hit();
        return Hit;
    })();
    var Miss = (function () {
        function Miss() {

        };
        Miss.value = new Miss();
        return Miss;
    })();
    var Win = (function () {
        function Win() {

        };
        Win.value = new Win();
        return Win;
    })();
    var Loss = (function () {
        function Loss() {

        };
        Loss.value = new Loss();
        return Loss;
    })();
    var Game = (function () {
        function Game(value0) {
            this.value0 = value0;
        };
        Game.create = function (value0) {
            return new Game(value0);
        };
        return Game;
    })();
    var initialState = function (s) {
        return new Game({
            solution: s, 
            guesses: [  ]
        });
    };
    var elem = function (__dict_Eq_392) {
        return function (x) {
            return function (xs) {
                return Data_Array.elemIndex(__dict_Eq_392)(x)(xs) >= 0;
            };
        };
    };
    var hitOrMiss = function (c) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_34) {
            var _371 = elem(Data_Char.eqChar)(c)(_34.value0.solution);
            if (_371) {
                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Hit.value);
            };
            if (!_371) {
                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Miss.value);
            };
            throw new Error("Failed pattern match");
        });
    };
    var misses = (function () {
        var missed = function (ss) {
            return function (c) {
                return !elem(Data_Char.eqChar)(c)(ss);
            };
        };
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_33) {
            return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Data_Array.filter(missed(_33.value0.solution))(_33.value0.guesses));
        });
    })();
    var checkForSolved = (function () {
        var hits = function (gs$prime) {
            return function (c) {
                return elem(Data_Char.eqChar)(c)(gs$prime);
            };
        };
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_31) {
            return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Prelude["=="](Prelude.eqArray(Data_Char.eqChar))(_31.value0.solution)(Data_Array.filter(hits(_31.value0.guesses))(_31.value0.solution)));
        });
    })();
    var checkForFailure = Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(misses)(function (_32) {
        return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Data_Array.length(_32) >= 5);
    });
    var check = function (c) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_30) {
            var _384 = elem(Data_Char.eqChar)(c)(_30.value0.guesses);
            if (_384) {
                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(AlreadyGuessed.value);
            };
            if (!_384) {
                return hitOrMiss(c);
            };
            throw new Error("Failed pattern match");
        });
    };
    var guess = function (c) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(check(c))(function (_29) {
            if (_29 instanceof Miss) {
                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_26) {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity))(new Game({
                        solution: _26.value0.solution, 
                        guesses: Data_Array.snoc(_26.value0.guesses)(c)
                    })))(function () {
                        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(checkForFailure)(function (_25) {
                            if (_25) {
                                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Loss.value);
                            };
                            if (!_25) {
                                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(_29);
                            };
                            throw new Error("Failed pattern match");
                        });
                    });
                });
            };
            if (_29 instanceof Hit) {
                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity)))(function (_28) {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.monadStateStateT(Data_Identity.monadIdentity))(new Game({
                        solution: _28.value0.solution, 
                        guesses: Data_Array.snoc(_28.value0.guesses)(c)
                    })))(function () {
                        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(checkForSolved)(function (_27) {
                            if (_27) {
                                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Win.value);
                            };
                            if (!_27) {
                                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(_29);
                            };
                            throw new Error("Failed pattern match");
                        });
                    });
                });
            };
            return Prelude["return"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(_29);
        });
    };
    return {
        AlreadyGuessed: AlreadyGuessed, 
        Hit: Hit, 
        Miss: Miss, 
        Win: Win, 
        Loss: Loss, 
        Game: Game, 
        elem: elem, 
        hitOrMiss: hitOrMiss, 
        misses: misses, 
        checkForFailure: checkForFailure, 
        checkForSolved: checkForSolved, 
        check: check, 
        guess: guess, 
        initialState: initialState
    };
})();
