// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $colon = cons;
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var $$const = function (_14) {
        return function (_15) {
            return _14;
        };
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _347 = compare(__dict_Ord_11)(a1)(a2);
                if (_347 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _348 = compare(__dict_Ord_12)(a1)(a2);
                if (_348 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "$": $dollar, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "-": $minus, 
        ":": $colon, 
        "<": $less, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">>=": $greater$greater$eq, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroupoid: Semigroupoid, 
        Unit: Unit, 
        ap: ap, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        cons: cons, 
        "const": $$const, 
        eqNumber: eqNumber, 
        flip: flip, 
        id: id, 
        liftA1: liftA1, 
        not: not, 
        numNumber: numNumber, 
        ordNumber: ordNumber, 
        otherwise: otherwise, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupoidArr: semigroupoidArr, 
        unit: unit
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var floor = Math.floor;;
    return {
        floor: floor
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function random() {  return Math.random();};
    return {
        random: random
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var maybe = function (_70) {
        return function (_71) {
            return function (_72) {
                if (_72 instanceof Nothing) {
                    return _70;
                };
                if (_72 instanceof Just) {
                    return _71(_72.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isJust = maybe(false)(Prelude["const"](true));
    return {
        Just: Just, 
        Nothing: Nothing, 
        isJust: isJust, 
        maybe: maybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    var $dot$dot = range;
    var singleton = function (a) {
        return [ a ];
    };
    var nubBy = function (_101) {
        return function (_102) {
            if (_102.length === 0) {
                return [  ];
            };
            if (_102.length >= 1) {
                var _358 = _102.slice(1);
                return Prelude[":"](_102[0])(nubBy(_101)(filter(function (y) {
                    return !_101(_102[0])(y);
                })(_358)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_57) {
        return nubBy(Prelude["=="](__dict_Eq_57));
    };
    var functorArray = new Prelude.Functor(map);
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    return {
        "..": $dot$dot, 
        applicativeArray: applicativeArray, 
        applyArray: applyArray, 
        bindArray: bindArray, 
        concat: concat, 
        concatMap: concatMap, 
        filter: filter, 
        functorArray: functorArray, 
        length: length, 
        map: map, 
        monadArray: monadArray, 
        nub: nub, 
        nubBy: nubBy, 
        range: range, 
        singleton: singleton, 
        snoc: snoc, 
        updateAt: updateAt
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        mempty: mempty
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Data_Monoid = PS.Data_Monoid;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var foldableArray = new Foldable(function (__dict_Monoid_112) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_112["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_112))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    return {
        Foldable: Foldable, 
        foldableArray: foldableArray, 
        foldl: foldl, 
        foldlArray: foldlArray, 
        foldr: foldr, 
        foldrArray: foldrArray
    };
})();
var PS = PS || {};
PS.Data_Map = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    function Leaf() {

    };
    Leaf.value = new Leaf();
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    var lookup = function (__copy___dict_Ord_147) {
        return function (__copy__271) {
            return function (__copy__272) {
                var __dict_Ord_147 = __copy___dict_Ord_147;
                var _271 = __copy__271;
                var _272 = __copy__272;
                tco: while (true) {
                    if (_272 instanceof Leaf) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (_272 instanceof Two && Prelude["=="](__dict_Ord_147["__superclass_Prelude.Eq_0"]())(_271)(_272.value1)) {
                        return new Data_Maybe.Just(_272.value2);
                    };
                    if (_272 instanceof Two && Prelude["<"](__dict_Ord_147)(_271)(_272.value1)) {
                        var __tco___dict_Ord_147 = __dict_Ord_147;
                        var __tco__271 = _271;
                        var __tco__272 = _272.value0;
                        __dict_Ord_147 = __tco___dict_Ord_147;
                        _271 = __tco__271;
                        _272 = __tco__272;
                        continue tco;
                    };
                    if (_272 instanceof Two) {
                        var __tco___dict_Ord_147 = __dict_Ord_147;
                        var __tco__271 = _271;
                        var __tco__272 = _272.value3;
                        __dict_Ord_147 = __tco___dict_Ord_147;
                        _271 = __tco__271;
                        _272 = __tco__272;
                        continue tco;
                    };
                    if (_272 instanceof Three && Prelude["=="](__dict_Ord_147["__superclass_Prelude.Eq_0"]())(_271)(_272.value1)) {
                        return new Data_Maybe.Just(_272.value2);
                    };
                    if (_272 instanceof Three && Prelude["=="](__dict_Ord_147["__superclass_Prelude.Eq_0"]())(_271)(_272.value4)) {
                        return new Data_Maybe.Just(_272.value5);
                    };
                    if (_272 instanceof Three && Prelude["<"](__dict_Ord_147)(_271)(_272.value1)) {
                        var __tco___dict_Ord_147 = __dict_Ord_147;
                        var __tco__271 = _271;
                        var __tco__272 = _272.value0;
                        __dict_Ord_147 = __tco___dict_Ord_147;
                        _271 = __tco__271;
                        _272 = __tco__272;
                        continue tco;
                    };
                    if (_272 instanceof Three && (Prelude["<"](__dict_Ord_147)(_272.value1)(_271) && Prelude["<="](__dict_Ord_147)(_271)(_272.value4))) {
                        var __tco___dict_Ord_147 = __dict_Ord_147;
                        var __tco__271 = _271;
                        var __tco__272 = _272.value3;
                        __dict_Ord_147 = __tco___dict_Ord_147;
                        _271 = __tco__271;
                        _272 = __tco__272;
                        continue tco;
                    };
                    if (_272 instanceof Three) {
                        var __tco___dict_Ord_147 = __dict_Ord_147;
                        var __tco__271 = _271;
                        var __tco__272 = _272.value6;
                        __dict_Ord_147 = __tco___dict_Ord_147;
                        _271 = __tco__271;
                        _272 = __tco__272;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var member = function (__dict_Ord_148) {
        return function (k) {
            return function (m) {
                return Data_Maybe.isJust(lookup(__dict_Ord_148)(k)(m));
            };
        };
    };
    var fromZipper = function (__copy___dict_Ord_149) {
        return function (__copy__273) {
            return function (__copy__274) {
                var __dict_Ord_149 = __copy___dict_Ord_149;
                var _273 = __copy__273;
                var _274 = __copy__274;
                tco: while (true) {
                    if (_273.length === 0) {
                        return _274;
                    };
                    if (_273.length >= 1) {
                        var _414 = _273.slice(1);
                        if (_273[0] instanceof TwoLeft) {
                            var __tco___dict_Ord_149 = __dict_Ord_149;
                            var __tco__274 = new Two(_274, (_273[0]).value0, (_273[0]).value1, (_273[0]).value2);
                            __dict_Ord_149 = __tco___dict_Ord_149;
                            _273 = _414;
                            _274 = __tco__274;
                            continue tco;
                        };
                    };
                    if (_273.length >= 1) {
                        var _419 = _273.slice(1);
                        if (_273[0] instanceof TwoRight) {
                            var __tco___dict_Ord_149 = __dict_Ord_149;
                            var __tco__274 = new Two((_273[0]).value0, (_273[0]).value1, (_273[0]).value2, _274);
                            __dict_Ord_149 = __tco___dict_Ord_149;
                            _273 = _419;
                            _274 = __tco__274;
                            continue tco;
                        };
                    };
                    if (_273.length >= 1) {
                        var _427 = _273.slice(1);
                        if (_273[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_149 = __dict_Ord_149;
                            var __tco__274 = new Three(_274, (_273[0]).value0, (_273[0]).value1, (_273[0]).value2, (_273[0]).value3, (_273[0]).value4, (_273[0]).value5);
                            __dict_Ord_149 = __tco___dict_Ord_149;
                            _273 = _427;
                            _274 = __tco__274;
                            continue tco;
                        };
                    };
                    if (_273.length >= 1) {
                        var _435 = _273.slice(1);
                        if (_273[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_149 = __dict_Ord_149;
                            var __tco__274 = new Three((_273[0]).value0, (_273[0]).value1, (_273[0]).value2, _274, (_273[0]).value3, (_273[0]).value4, (_273[0]).value5);
                            __dict_Ord_149 = __tco___dict_Ord_149;
                            _273 = _435;
                            _274 = __tco__274;
                            continue tco;
                        };
                    };
                    if (_273.length >= 1) {
                        var _443 = _273.slice(1);
                        if (_273[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_149 = __dict_Ord_149;
                            var __tco__274 = new Three((_273[0]).value0, (_273[0]).value1, (_273[0]).value2, (_273[0]).value3, (_273[0]).value4, (_273[0]).value5, _274);
                            __dict_Ord_149 = __tco___dict_Ord_149;
                            _273 = _443;
                            _274 = __tco__274;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var insert = function (__dict_Ord_150) {
        var up = function (__copy___dict_Ord_151) {
            return function (__copy__285) {
                return function (__copy__286) {
                    var __dict_Ord_151 = __copy___dict_Ord_151;
                    var _285 = __copy__285;
                    var _286 = __copy__286;
                    tco: while (true) {
                        if (_285.length === 0) {
                            return new Two(_286.value0, _286.value1, _286.value2, _286.value3);
                        };
                        if (_285.length >= 1) {
                            var _458 = _285.slice(1);
                            if (_285[0] instanceof TwoLeft) {
                                return fromZipper(__dict_Ord_151)(_458)(new Three(_286.value0, _286.value1, _286.value2, _286.value3, (_285[0]).value0, (_285[0]).value1, (_285[0]).value2));
                            };
                        };
                        if (_285.length >= 1) {
                            var _467 = _285.slice(1);
                            if (_285[0] instanceof TwoRight) {
                                return fromZipper(__dict_Ord_151)(_467)(new Three((_285[0]).value0, (_285[0]).value1, (_285[0]).value2, _286.value0, _286.value1, _286.value2, _286.value3));
                            };
                        };
                        if (_285.length >= 1) {
                            var _479 = _285.slice(1);
                            if (_285[0] instanceof ThreeLeft) {
                                var __tco___dict_Ord_151 = __dict_Ord_151;
                                var __tco__286 = new KickUp(new Two(_286.value0, _286.value1, _286.value2, _286.value3), (_285[0]).value0, (_285[0]).value1, new Two((_285[0]).value2, (_285[0]).value3, (_285[0]).value4, (_285[0]).value5));
                                __dict_Ord_151 = __tco___dict_Ord_151;
                                _285 = _479;
                                _286 = __tco__286;
                                continue tco;
                            };
                        };
                        if (_285.length >= 1) {
                            var _491 = _285.slice(1);
                            if (_285[0] instanceof ThreeMiddle) {
                                var __tco___dict_Ord_151 = __dict_Ord_151;
                                var __tco__286 = new KickUp(new Two((_285[0]).value0, (_285[0]).value1, (_285[0]).value2, _286.value0), _286.value1, _286.value2, new Two(_286.value3, (_285[0]).value3, (_285[0]).value4, (_285[0]).value5));
                                __dict_Ord_151 = __tco___dict_Ord_151;
                                _285 = _491;
                                _286 = __tco__286;
                                continue tco;
                            };
                        };
                        if (_285.length >= 1) {
                            var _503 = _285.slice(1);
                            if (_285[0] instanceof ThreeRight) {
                                var __tco___dict_Ord_151 = __dict_Ord_151;
                                var __tco__286 = new KickUp(new Two((_285[0]).value0, (_285[0]).value1, (_285[0]).value2, (_285[0]).value3), (_285[0]).value4, (_285[0]).value5, new Two(_286.value0, _286.value1, _286.value2, _286.value3));
                                __dict_Ord_151 = __tco___dict_Ord_151;
                                _285 = _503;
                                _286 = __tco__286;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var down = function (__copy___dict_Ord_152) {
            return function (__copy__281) {
                return function (__copy__282) {
                    return function (__copy__283) {
                        return function (__copy__284) {
                            var __dict_Ord_152 = __copy___dict_Ord_152;
                            var _281 = __copy__281;
                            var _282 = __copy__282;
                            var _283 = __copy__283;
                            var _284 = __copy__284;
                            tco: while (true) {
                                if (_284 instanceof Leaf) {
                                    return up(__dict_Ord_152)(_281)(new KickUp(Leaf.value, _282, _283, Leaf.value));
                                };
                                if (_284 instanceof Two && Prelude["=="](__dict_Ord_152["__superclass_Prelude.Eq_0"]())(_282)(_284.value1)) {
                                    return fromZipper(__dict_Ord_152)(_281)(new Two(_284.value0, _282, _283, _284.value3));
                                };
                                if (_284 instanceof Two && Prelude["<"](__dict_Ord_152)(_282)(_284.value1)) {
                                    var __tco___dict_Ord_152 = __dict_Ord_152;
                                    var __tco__281 = Prelude[":"](new TwoLeft(_284.value1, _284.value2, _284.value3))(_281);
                                    var __tco__282 = _282;
                                    var __tco__283 = _283;
                                    var __tco__284 = _284.value0;
                                    __dict_Ord_152 = __tco___dict_Ord_152;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    _283 = __tco__283;
                                    _284 = __tco__284;
                                    continue tco;
                                };
                                if (_284 instanceof Two) {
                                    var __tco___dict_Ord_152 = __dict_Ord_152;
                                    var __tco__281 = Prelude[":"](new TwoRight(_284.value0, _284.value1, _284.value2))(_281);
                                    var __tco__282 = _282;
                                    var __tco__283 = _283;
                                    var __tco__284 = _284.value3;
                                    __dict_Ord_152 = __tco___dict_Ord_152;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    _283 = __tco__283;
                                    _284 = __tco__284;
                                    continue tco;
                                };
                                if (_284 instanceof Three && Prelude["=="](__dict_Ord_152["__superclass_Prelude.Eq_0"]())(_282)(_284.value1)) {
                                    return fromZipper(__dict_Ord_152)(_281)(new Three(_284.value0, _282, _283, _284.value3, _284.value4, _284.value5, _284.value6));
                                };
                                if (_284 instanceof Three && Prelude["=="](__dict_Ord_152["__superclass_Prelude.Eq_0"]())(_282)(_284.value4)) {
                                    return fromZipper(__dict_Ord_152)(_281)(new Three(_284.value0, _284.value1, _284.value2, _284.value3, _282, _283, _284.value6));
                                };
                                if (_284 instanceof Three && Prelude["<"](__dict_Ord_152)(_282)(_284.value1)) {
                                    var __tco___dict_Ord_152 = __dict_Ord_152;
                                    var __tco__281 = Prelude[":"](new ThreeLeft(_284.value1, _284.value2, _284.value3, _284.value4, _284.value5, _284.value6))(_281);
                                    var __tco__282 = _282;
                                    var __tco__283 = _283;
                                    var __tco__284 = _284.value0;
                                    __dict_Ord_152 = __tco___dict_Ord_152;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    _283 = __tco__283;
                                    _284 = __tco__284;
                                    continue tco;
                                };
                                if (_284 instanceof Three && (Prelude["<"](__dict_Ord_152)(_284.value1)(_282) && Prelude["<="](__dict_Ord_152)(_282)(_284.value4))) {
                                    var __tco___dict_Ord_152 = __dict_Ord_152;
                                    var __tco__281 = Prelude[":"](new ThreeMiddle(_284.value0, _284.value1, _284.value2, _284.value4, _284.value5, _284.value6))(_281);
                                    var __tco__282 = _282;
                                    var __tco__283 = _283;
                                    var __tco__284 = _284.value3;
                                    __dict_Ord_152 = __tco___dict_Ord_152;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    _283 = __tco__283;
                                    _284 = __tco__284;
                                    continue tco;
                                };
                                if (_284 instanceof Three) {
                                    var __tco___dict_Ord_152 = __dict_Ord_152;
                                    var __tco__281 = Prelude[":"](new ThreeRight(_284.value0, _284.value1, _284.value2, _284.value3, _284.value4, _284.value5))(_281);
                                    var __tco__282 = _282;
                                    var __tco__283 = _283;
                                    var __tco__284 = _284.value6;
                                    __dict_Ord_152 = __tco___dict_Ord_152;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    _283 = __tco__283;
                                    _284 = __tco__284;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_150)([  ]);
    };
    var empty = Leaf.value;
    return {
        empty: empty, 
        insert: insert, 
        lookup: lookup, 
        member: member
    };
})();
var PS = PS || {};
PS.Data_Set = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Map = PS.Data_Map;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    function Set(value0) {
        this.value0 = value0;
    };
    Set.create = function (value0) {
        return new Set(value0);
    };
    var member = function (__dict_Ord_174) {
        return function (_299) {
            return function (_300) {
                return Data_Map.member(__dict_Ord_174)(_299)(_300.value0);
            };
        };
    };
    var insert = function (__dict_Ord_175) {
        return function (_301) {
            return function (_302) {
                return new Set(Data_Map.insert(__dict_Ord_175)(_301)(Prelude.unit)(_302.value0));
            };
        };
    };
    var empty = new Set(Data_Map.empty);
    var fromList = function (__dict_Ord_177) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (a) {
                return insert(__dict_Ord_177)(a)(m);
            };
        })(empty);
    };
    return {
        empty: empty, 
        fromList: fromList, 
        insert: insert, 
        member: member
    };
})();
var PS = PS || {};
PS.Grid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Set = PS.Data_Set;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Math = PS.Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    function Coords(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Coords.create = function (value0) {
        return function (value1) {
            return new Coords(value0, value1);
        };
    };
    function Dimensions(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Dimensions.create = function (value0) {
        return function (value1) {
            return new Dimensions(value0, value1);
        };
    };
    function Mine() {

    };
    Mine.value = new Mine();
    function Hint(value0) {
        this.value0 = value0;
    };
    Hint.create = function (value0) {
        return new Hint(value0);
    };
    function Cell(value0) {
        this.value0 = value0;
    };
    Cell.create = function (value0) {
        return new Cell(value0);
    };
    function Grid(value0) {
        this.value0 = value0;
    };
    Grid.create = function (value0) {
        return new Grid(value0);
    };
    var updateValue = function (_314) {
        return function (_315) {
            return new Cell({
                coords: _314.value0.coords, 
                value: _315
            });
        };
    };
    var sub1 = Prelude.flip(Prelude["-"](Prelude.numNumber))(1);
    var surroundingCoords = function (_328) {
        var coordinateDeltas = [ [ sub1, Prelude.id(Prelude.categoryArr) ], [ Prelude["+"](Prelude.numNumber)(1), Prelude.id(Prelude.categoryArr) ], [ Prelude.id(Prelude.categoryArr), sub1 ], [ Prelude.id(Prelude.categoryArr), Prelude["+"](Prelude.numNumber)(1) ], [ sub1, sub1 ], [ Prelude["+"](Prelude.numNumber)(1), Prelude["+"](Prelude.numNumber)(1) ], [ sub1, Prelude["+"](Prelude.numNumber)(1) ], [ Prelude["+"](Prelude.numNumber)(1), sub1 ] ];
        var applyDeltas = function (_344) {
            if (_344.length === 2) {
                return new Coords(_344[0](_328.value0), _344[1](_328.value1));
            };
            throw new Error("Failed pattern match");
        };
        return Data_Array.map(applyDeltas)(coordinateDeltas);
    };
    var randomInt = function (max) {
        return function __do() {
            var _13 = Control_Monad_Eff_Random.random();
            return 1 + Math.floor(_13 * max);
        };
    };
    var mined = function (_325) {
        if (_325.value0.value instanceof Data_Maybe.Just && _325.value0.value.value0 instanceof Mine) {
            return true;
        };
        return false;
    };
    var minedCells = function (_321) {
        return Data_Array.filter(mined)(_321.value0.cells);
    };
    var unmined = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(mined);
    var unminedCells = function (_322) {
        return Data_Array.filter(unmined)(_322.value0.cells);
    };
    var eqCoords = new Prelude.Eq(function (coords) {
        return function (coords$prime) {
            return !Prelude["=="](eqCoords)(coords)(coords$prime);
        };
    }, function (_331) {
        return function (_332) {
            return _331.value0 === _332.value0 && _331.value1 === _332.value1;
        };
    });
    var ordCoords = new Prelude.Ord(function () {
        return eqCoords;
    }, function (_333) {
        return function (_334) {
            if (_333.value0 === _334.value0) {
                return Prelude.compare(Prelude.ordNumber)(_333.value1)(_334.value1);
            };
            if (Prelude.otherwise) {
                return Prelude.compare(Prelude.ordNumber)(_333.value0)(_334.value0);
            };
            throw new Error("Failed pattern match");
        };
    });
    var neighbor = function (_323) {
        return function (_324) {
            return Data_Set.member(ordCoords)(_324.value0.coords)(Data_Set.fromList(ordCoords)(surroundingCoords(_323)));
        };
    };
    var surroundingCells = function (_326) {
        return function (_327) {
            return Data_Array.filter(neighbor(_326))(_327.value0.cells);
        };
    };
    var randomCoords = function (_319) {
        return function (_320) {
            var randomCoords$prime = function (_341) {
                return function (_342) {
                    return function (_343) {
                        if (Data_Array.length(_343) === _341) {
                            return Prelude["return"](Control_Monad_Eff.monadEff)(_343);
                        };
                        if (Prelude.otherwise) {
                            return function __do() {
                                var _12 = randomInt(_342.value0)();
                                var _11 = randomInt(_342.value1)();
                                return randomCoords$prime(_341)(_342)(Data_Array.nub(eqCoords)(Data_Array.snoc(_343)(new Coords(_12, _11))))();
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return randomCoords$prime(_319)(_320.value0.dimensions)([  ]);
        };
    };
    var emptyCells = function (_313) {
        return Data_Array.concat(Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](1)(_313.value0))(function (_9) {
            return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](1)(_313.value1))(function (_8) {
                return Prelude["return"](Data_Array.monadArray)([ new Cell({
                    coords: new Coords(_9, _8), 
                    value: Data_Maybe.Nothing.value
                }) ]);
            });
        }));
    };
    var emptyGrid = function (dims) {
        return new Grid({
            dimensions: dims, 
            cells: emptyCells(dims)
        });
    };
    var cellIdx = function (_329) {
        return function (_330) {
            return (_330.value0 - 1) * _329.value1 + _330.value1 - 1;
        };
    };
    var updateCell = function (_316) {
        return function (_317) {
            return function (_318) {
                return new Grid({
                    dimensions: _318.value0.dimensions, 
                    cells: Data_Array.updateAt(cellIdx(_318.value0.dimensions)(_316))(_317)(_318.value0.cells)
                });
            };
        };
    };
    var layMines = function (n) {
        return function (grid) {
            var layMines$prime = function (__copy__335) {
                return function (__copy__336) {
                    var _335 = __copy__335;
                    var _336 = __copy__336;
                    tco: while (true) {
                        if (_336.length >= 1) {
                            var _637 = _336.slice(1);
                            var __tco__335 = updateCell(_336[0])(new Cell({
                                coords: _336[0], 
                                value: new Data_Maybe.Just(Mine.value)
                            }))(_335);
                            _335 = __tco__335;
                            _336 = _637;
                            continue tco;
                        };
                        if (_336.length === 0) {
                            return _335;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return function __do() {
                var _10 = randomCoords(n)(grid)();
                return layMines$prime(grid)(_10);
            };
        };
    };
    var placeHints = function (grid) {
        var updateHint = function (_339) {
            return function (_340) {
                if (_340.value0.value instanceof Data_Maybe.Just && _340.value0.value.value0 instanceof Mine) {
                    return _339;
                };
                if (_340.value0.value instanceof Data_Maybe.Nothing) {
                    return updateCell(_340.value0.coords)(updateValue(_340)(new Data_Maybe.Just(new Hint(1))))(_339);
                };
                if (_340.value0.value instanceof Data_Maybe.Just && _340.value0.value.value0 instanceof Hint) {
                    return updateCell(_340.value0.coords)(updateValue(_340)(new Data_Maybe.Just(new Hint(1 + _340.value0.value.value0.value0))))(_339);
                };
                throw new Error("Failed pattern match");
            };
        };
        var updateHints = function (_337) {
            return function (_338) {
                return Data_Foldable.foldl(Data_Foldable.foldableArray)(updateHint)(_337)(surroundingCells(_338.value0.coords)(_337));
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(updateHints)(grid)(minedCells(grid));
    };
    return {
        Cell: Cell, 
        Coords: Coords, 
        Dimensions: Dimensions, 
        Grid: Grid, 
        Hint: Hint, 
        Mine: Mine, 
        cellIdx: cellIdx, 
        emptyCells: emptyCells, 
        emptyGrid: emptyGrid, 
        eqCoords: eqCoords, 
        layMines: layMines, 
        mined: mined, 
        minedCells: minedCells, 
        neighbor: neighbor, 
        ordCoords: ordCoords, 
        placeHints: placeHints, 
        randomCoords: randomCoords, 
        randomInt: randomInt, 
        sub1: sub1, 
        surroundingCells: surroundingCells, 
        surroundingCoords: surroundingCoords, 
        unmined: unmined, 
        unminedCells: unminedCells, 
        updateCell: updateCell, 
        updateValue: updateValue
    };
})();
